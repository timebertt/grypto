package modular

// OrderOf calculates the order of base in the residue system modulo mod.
// In ℤₐ the order of an element g is defined as the smallest integer l, so that g^l ≡ 1 mod a, if such l exists.
// If not, the order of g is infinite.
// Also, the order of g in ℤₐ is equal to the magnitude of the multiplicative subgroup generated by g modulo a:
// order(g) = order(⟨g+aℤ⟩) = |⟨g+aℤ⟩|
// See https://en.wikipedia.org/wiki/Order_(group_theory)
func OrderOf(base, mod int32) (order int32, inf bool) {
  if base <= 0 {
    panic("grypt/modular: base must be greater than 0")
  }
  if mod <= 0 {
    panic("grypto/modular: modulus must be greater than 0")
  }

  var (
    exp = int64(1)
    i   = int32(0)
    b   = int64(base % mod)
    m   = int64(mod)
  )

  for ; i <= mod; i++ {
    if i > 0 && exp == 1 {
      break
    }
    if exp == 0 {
      // once base^i = 0, it won't change anymore =>  order(base) = Inf
      return 0, true
    }

    exp = exp * b % m
  }

  return i, false
}
